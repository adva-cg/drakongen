Generate a JavaScript function "generateProject".
Do not use "new", "class", and "this" keywords.
Use "undefined" instead of "null".
The module format is CommonJs.


## Class "Options"
output: string, the output folder
language: string, language code



## Procedure "process file"
Parameters:
- filename: string
- options: Options
- output: an array of strings

Algorithm:
var pseudo = await convertToPseudo(filename, options)
output.push(pseudo)
add 2 empty strings to output

End of procedure


## Procedure "process folder"
Parameters:
- filename: string
- options: Options
- output: an array of strings

Algorithm:
name = get the name part of filename
If not (name starts with ".")
    filenames = get directory content(filename)
    for each name in filenames
        full path = contacenate path(filename, name)
        If full path is a directory
            process folder(full path, options, output)
        Else
            process file(full path, options, output)

End of procedure


## Procedure "generateProject"
Parameters:
- targetPath: string, the filepath to the input project file
- options: Options

function type: async

Algorithm:
Call subroutine: "Read project file"

Subroutine: "Read project file"
project content = read file at targetPath as a UTF-8 string
lines = split project content by end of line symbol
items = trim each line in lines and take only non-empty ones
output = []
Call subroutine "Convert files"
End of subroutine

Subroutine: "Convert files"
for each item in items
    full path = concatenate paths(the folder part of targetPath, item)
    normalize full path
    If full path is a directory
        process folder(full path, options, output)
    Else
        process file(full path, options, output)
Call subroutine "Write the output file"
End of subroutine

Subroutine: "Write the output file"
content = concatenate(output, end of line symbol)
await writeOut(content, targetPath, options.output)
End of subroutine

End of procedure

